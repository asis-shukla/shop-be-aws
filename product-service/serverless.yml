service: product-service
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  httpApi:
    cors: true
  environment:
    TABLE_NAME_ONE: products
    TABLE_NAME_TWO: stocks
    SNS_ARN: ${self:custom.snsArn}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "arn:aws:dynamodb:us-east-1:164051493317:table/products"
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "arn:aws:dynamodb:us-east-1:164051493317:table/stocks"   
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
        - Effect: "Allow"
          Action: "sqs:*"
          Resource: ${self:custom.sqsArn}
        - Effect: "Allow"
          Action: "sns:*"
          Resource:
            Ref: SNSTopic

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: false
    packager: "npm"
    excludeFiles: tests/*.test.js
  serverless-offline:
    httpPort: 3000
  autoswagger:
    apiType: "httpApi"
    generateSwaggerOnDeploy: false
    schemes: ["http", "https", "ws", "wss"]
  sqsArn: arn:aws:sqs:us-east-1:164051493317:catalogItemsQueue
  snsArn: arn:aws:sns:us-east-1:164051493317:createProductTopic
  email: ashish.14cs@gmail.com

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.email}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          limitedQuantity:
            - "false"


functions:
  getProductsList:
    handler: src/handler.getProductsList
  getProductsById:
    handler: src/handler.getProductsById
  createProduct:
    handler: src/handler.createProduct
  hello:
    handler: src/handler.hello
  catalogBatchProcess:
    architecture: arm64
    handler: src/handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: ${self:custom.sqsArn}
